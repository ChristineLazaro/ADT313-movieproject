{"ast":null,"code":"import axios from 'axios';\n\n// Fetch videos from the server\nconst fetchVideos = async () => {\n  try {\n    const response = await axios.get('/videos', {\n      headers: {\n        Authorization: `Bearer ${accessToken}` // Use the appropriate token for authentication\n      }\n    });\n    setVideos(response.data); // Set videos to state\n  } catch (error) {\n    console.error('Error fetching videos:', error.response || error.message);\n    alert('Failed to load videos. Please try again later.');\n  }\n};\n\n// Save a new video\nconst handleSave = async videoData => {\n  const formData = new FormData();\n  formData.append('video', videoData.file);\n  formData.append('title', videoData.title);\n  formData.append('description', videoData.description);\n  try {\n    const response = await axios.post('/videos', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        // Ensure content type is correct for file upload\n        Authorization: `Bearer ${accessToken}` // Authorization header if needed\n      }\n    });\n    console.log('Video saved successfully:', response.data);\n    fetchVideos(); // Refresh the video list after save\n  } catch (error) {\n    console.error('Error saving video:', error.response || error.message);\n    alert('Failed to save the video. Please try again.');\n  }\n};\n\n// Update an existing video\nconst handleUpdate = async (videoId, updatedData) => {\n  const formData = new FormData();\n  formData.append('title', updatedData.title);\n  formData.append('description', updatedData.description);\n  try {\n    const response = await axios.patch(`/videos/${videoId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    console.log('Video updated successfully:', response.data);\n    fetchVideos(); // Refresh after update\n  } catch (error) {\n    console.error('Error updating video:', error.response || error.message);\n    alert('Failed to update the video. Please try again.');\n  }\n};\n\n// Delete a video\nconst handleDelete = async videoId => {\n  try {\n    await axios.delete(`/videos/${videoId}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    console.log('Video deleted successfully');\n    fetchVideos(); // Refresh after delete\n  } catch (error) {\n    console.error('Error deleting video:', error.response || error.message);\n    alert('Failed to delete the video. Please try again.');\n  }\n};","map":{"version":3,"names":["axios","fetchVideos","response","get","headers","Authorization","accessToken","setVideos","data","error","console","message","alert","handleSave","videoData","formData","FormData","append","file","title","description","post","log","handleUpdate","videoId","updatedData","patch","handleDelete","delete"],"sources":["C:/Users/christine/ADT313-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Fetch videos from the server\r\nconst fetchVideos = async () => {\r\n  try {\r\n    const response = await axios.get('/videos', {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}` // Use the appropriate token for authentication\r\n      }\r\n    });\r\n    setVideos(response.data); // Set videos to state\r\n  } catch (error) {\r\n    console.error('Error fetching videos:', error.response || error.message);\r\n    alert('Failed to load videos. Please try again later.');\r\n  }\r\n};\r\n\r\n// Save a new video\r\nconst handleSave = async (videoData) => {\r\n  const formData = new FormData();\r\n  formData.append('video', videoData.file);\r\n  formData.append('title', videoData.title);\r\n  formData.append('description', videoData.description);\r\n\r\n  try {\r\n    const response = await axios.post('/videos', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data', // Ensure content type is correct for file upload\r\n        Authorization: `Bearer ${accessToken}` // Authorization header if needed\r\n      }\r\n    });\r\n    console.log('Video saved successfully:', response.data);\r\n    fetchVideos(); // Refresh the video list after save\r\n  } catch (error) {\r\n    console.error('Error saving video:', error.response || error.message);\r\n    alert('Failed to save the video. Please try again.');\r\n  }\r\n};\r\n\r\n// Update an existing video\r\nconst handleUpdate = async (videoId, updatedData) => {\r\n  const formData = new FormData();\r\n  formData.append('title', updatedData.title);\r\n  formData.append('description', updatedData.description);\r\n\r\n  try {\r\n    const response = await axios.patch(`/videos/${videoId}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    });\r\n    console.log('Video updated successfully:', response.data);\r\n    fetchVideos(); // Refresh after update\r\n  } catch (error) {\r\n    console.error('Error updating video:', error.response || error.message);\r\n    alert('Failed to update the video. Please try again.');\r\n  }\r\n};\r\n\r\n// Delete a video\r\nconst handleDelete = async (videoId) => {\r\n  try {\r\n    await axios.delete(`/videos/${videoId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    });\r\n    console.log('Video deleted successfully');\r\n    fetchVideos(); // Refresh after delete\r\n  } catch (error) {\r\n    console.error('Error deleting video:', error.response || error.message);\r\n    alert('Failed to delete the video. Please try again.');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}