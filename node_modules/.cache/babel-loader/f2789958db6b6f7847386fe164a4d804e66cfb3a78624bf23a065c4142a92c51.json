{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\christine\\\\ADT313-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Photos\\\\Photos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './Photos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Photos() {\n  _s();\n  const {\n    tmdbId\n  } = useParams();\n  const [photoInfo, setPhotoInfo] = useState([]);\n  const [formState, setFormState] = useState({\n    mode: 'base',\n    photo: {}\n  });\n  const [data, setData] = useState({\n    url: '',\n    description: ''\n  });\n  const [tmdbPhotos, setTmdbPhotos] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const accessToken = localStorage.getItem('accessToken');\n  const user = JSON.parse(localStorage.getItem('user'));\n  const apiKey = '67e39655ab5c0b2be23473d483fb4af4';\n  useEffect(() => {\n    axios.get('/photos', {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      setPhotoInfo(response.data);\n    });\n  }, [accessToken]);\n  const searchMoviePhotos = () => {\n    if (searchQuery.trim() === '') return; // Prevent empty searches\n    axios.get(`https://api.themoviedb.org/3/search/movie`, {\n      params: {\n        api_key: apiKey,\n        query: searchQuery\n      }\n    }).then(response => {\n      if (response.data.results.length > 0) {\n        const movieId = response.data.results[0].id;\n        axios.get(`https://api.themoviedb.org/3/movie/${movieId}/images`, {\n          params: {\n            api_key: apiKey\n          }\n        }).then(res => {\n          const photos = res.data.backdrops.map(photo => ({\n            url: `https://image.tmdb.org/t/p/w500${photo.file_path}`,\n            description: 'Photo from TMDB'\n          }));\n          setTmdbPhotos(photos);\n        });\n      } else {\n        alert('No photos found for this movie.');\n        setTmdbPhotos([]);\n      }\n    });\n  };\n  const importPhoto = photo => {\n    const formData = new FormData();\n    formData.append('userId', user.userId);\n    formData.append('movieId', tmdbId);\n    formData.append('url', photo.url);\n    formData.append('description', photo.description);\n    axios.post('/photos', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      setPhotoInfo([...photoInfo, response.data]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"photos-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        className: \"search-input\",\n        placeholder: \"Search for a movie...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: searchMoviePhotos,\n        children: \"Import Photos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tmdb-photos-container\",\n      children: tmdbPhotos.map((photo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tmdb-photo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"tmdb-photo\",\n          src: photo.url,\n          alt: photo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-photo-button\",\n          onClick: () => importPhoto(photo),\n          children: \"Add Photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"added-photos-container\",\n      children: photoInfo.filter(photo => photo.movieId === parseInt(tmdbId)).map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"added-photo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"added-photo\",\n          src: photo.url,\n          alt: photo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-photo-button\",\n          onClick: () => axios.delete(`/photos/${photo.id}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          }).then(() => setPhotoInfo(photoInfo.filter(p => p.id !== photo.id))),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, photo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Photos, \"6M3/SmrLWPb+pCO0bConJoLjuoY=\", false, function () {\n  return [useParams];\n});\n_c = Photos;\nexport default Photos;\nvar _c;\n$RefreshReg$(_c, \"Photos\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","Photos","_s","tmdbId","photoInfo","setPhotoInfo","formState","setFormState","mode","photo","data","setData","url","description","tmdbPhotos","setTmdbPhotos","searchQuery","setSearchQuery","accessToken","localStorage","getItem","user","JSON","parse","apiKey","get","headers","Authorization","then","response","searchMoviePhotos","trim","params","api_key","query","results","length","movieId","id","res","photos","backdrops","map","file_path","alert","importPhoto","formData","FormData","append","userId","post","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","src","alt","filter","parseInt","delete","p","_c","$RefreshReg$"],"sources":["C:/Users/christine/ADT313-movieproject/src/pages/Main/Movie/Form/Photos/Photos.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Photos.css';\r\n\r\nfunction Photos() {\r\n  const { tmdbId } = useParams();\r\n  const [photoInfo, setPhotoInfo] = useState([]);\r\n  const [formState, setFormState] = useState({ mode: 'base', photo: {} });\r\n  const [data, setData] = useState({\r\n    url: '',\r\n    description: '',\r\n  });\r\n  const [tmdbPhotos, setTmdbPhotos] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n  const apiKey = '67e39655ab5c0b2be23473d483fb4af4';\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('/photos', {\r\n        headers: { Authorization: `Bearer ${accessToken}` },\r\n      })\r\n      .then((response) => {\r\n        setPhotoInfo(response.data);\r\n      });\r\n  }, [accessToken]);\r\n\r\n  const searchMoviePhotos = () => {\r\n    if (searchQuery.trim() === '') return; // Prevent empty searches\r\n    axios\r\n      .get(`https://api.themoviedb.org/3/search/movie`, {\r\n        params: { api_key: apiKey, query: searchQuery },\r\n      })\r\n      .then((response) => {\r\n        if (response.data.results.length > 0) {\r\n          const movieId = response.data.results[0].id;\r\n          axios\r\n            .get(`https://api.themoviedb.org/3/movie/${movieId}/images`, {\r\n              params: { api_key: apiKey },\r\n            })\r\n            .then((res) => {\r\n              const photos = res.data.backdrops.map((photo) => ({\r\n                url: `https://image.tmdb.org/t/p/w500${photo.file_path}`,\r\n                description: 'Photo from TMDB',\r\n              }));\r\n              setTmdbPhotos(photos);\r\n            });\r\n        } else {\r\n          alert('No photos found for this movie.');\r\n          setTmdbPhotos([]);\r\n        }\r\n      });\r\n  };\r\n\r\n  const importPhoto = (photo) => {\r\n    const formData = new FormData();\r\n    formData.append('userId', user.userId);\r\n    formData.append('movieId', tmdbId);\r\n    formData.append('url', photo.url);\r\n    formData.append('description', photo.description);\r\n\r\n    axios\r\n      .post('/photos', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data', Authorization: `Bearer ${accessToken}` },\r\n      })\r\n      .then((response) => {\r\n        setPhotoInfo([...photoInfo, response.data]);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"photos-container\">\r\n      <div className=\"search-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n          className=\"search-input\"\r\n          placeholder=\"Search for a movie...\"\r\n        />\r\n        <button className=\"search-button\" onClick={searchMoviePhotos}>\r\n          Import Photos\r\n        </button>\r\n      </div>\r\n\r\n      {/* Display imported photos from TMDB */}\r\n      <div className=\"tmdb-photos-container\">\r\n        {tmdbPhotos.map((photo, index) => (\r\n          <div key={index} className=\"tmdb-photo-item\">\r\n            <img className=\"tmdb-photo\" src={photo.url} alt={photo.description} />\r\n            <button className=\"import-photo-button\" onClick={() => importPhoto(photo)}>\r\n              Add Photo\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Display added photos */}\r\n      <div className=\"added-photos-container\">\r\n        {photoInfo\r\n          .filter((photo) => photo.movieId === parseInt(tmdbId))\r\n          .map((photo) => (\r\n            <div key={photo.id} className=\"added-photo-item\">\r\n              <img className=\"added-photo\" src={photo.url} alt={photo.description} />\r\n              <button\r\n                className=\"delete-photo-button\"\r\n                onClick={() =>\r\n                  axios\r\n                    .delete(`/photos/${photo.id}`, { headers: { Authorization: `Bearer ${accessToken}` } })\r\n                    .then(() => setPhotoInfo(photoInfo.filter((p) => p.id !== photo.id)))\r\n                }\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photos;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}